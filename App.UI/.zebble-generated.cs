//----------------------
// <auto-generated>
//     GENERATED BY ZEBBLE
// </auto-generated>
#pragma warning disable  IDE0017, CS0108, CS0436
//----------------------

#region UI.Templates.Blank
namespace UI.Templates
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Templates\Blank.zbl")]
    partial class Blank : Page
    {
        public ScrollView Body = new ScrollView();
        public Stack Wrapper = new Stack();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Body.Id = "Body";
            Body.CssClass = "Body";

            Wrapper.Id = "Wrapper";
            Wrapper.CssClass = "Wrapper";

            await Body.Add(Wrapper);
            await Add(Body);
        }
    }
}
#endregion

#region UI.Templates.EzNavBarPage
namespace UI.Templates
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Templates\EzNavBarPage.zbl")]
    partial class EzNavBarPage : NavBarPage
    {
    }
}
#endregion

#region UI.Modules.RatingBox
namespace UI.Modules
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Modules\RatingBox.zbl")]
    partial class RatingBox : Page, ITemplate<ViewModel.RatingBox>
    {
        public ViewModel.RatingBox Model = Zebble.Mvvm.ViewModel.The<ViewModel.RatingBox>();
        public Row Holder = new Row();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Holder.Id = "Holder";

            await Add(Holder);
        }
    }
}
#endregion

#region UI.Pages.TestPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\TestPage.zbl")]
    partial class TestPage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.TestPage>
    {
        public ViewModel.TestPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.TestPage>();
        public Modules.ExpandableLayout Expander = new Modules.ExpandableLayout();
        public Modules.FolderLayout<Domain.Models.Category, CategoryViewGen> FolderView = new Modules.FolderLayout<Domain.Models.Category, CategoryViewGen>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Title = "Test Page";

            var __button1 = new Button() { Text = "Toggle" }.On(x => x.Tapped, () => Expander.Toggle());

            Expander.Id = "Expander";
            Expander.ModelHolder = Model;

            var __textView1 = new TextView() { Text = "Text 1" };

            var __textView2 = new TextView() { Text = "Text 2" };

            var __textView3 = new TextView() { Text = "Text 3" };

            FolderView.Id = "FolderView";
            FolderView.ModelHolder = Model;
            FolderView.OnItemSelected = data => NotifyUser(data.Name).RunInParallel();
            FolderView.ViewGen = new CategoryViewGen();
            FolderView.FolderData = await GetData();

            var __imageView1 = new ImageView().Set(x => x.Style.BackgroundColor = "#f00").Set(x => x.Style.Height(100));

            await Expander.AddRange(new View[] { __textView1, __textView2, __textView3 });
            await Body.AddRange(new View[] { __button1, Expander, FolderView, __imageView1 });
        }
    }
}
#endregion

#region UI.Pages.CartOrderCardItem
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Cart\CartOrderCardItem.zbl")]
    partial class CartOrderCardItem : Row
    {
        public TextView Name = new TextView();
        public TextView ShortCription = new TextView();
        public ItemPicker<string> CountPicker = new ItemPicker<string>();
        public ImageView Image = new ImageView();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __stack1 = new Stack();

            Name.Id = "Name";
            Name.Text = OrderItem.Product.Name;

            ShortCription.Id = "ShortCription";
            ShortCription.Text = OrderItem.Product.ShortCription;

            var __row1 = new Row() { CssClass = "ItemPickerHolder" };

            var __textView1 = new TextView() { Text = "Count", CssClass = "LabelText" };

            CountPicker.Id = "CountPicker";
            CountPicker.MultiSelect = false;
            CountPicker.Searchable = false;
            CountPicker.Source = Counts;
            CountPicker.Set(x => x.Label.Text = OrderItem.Count.ToString());

            var __row2 = new Row() { CssClass = "TopBorder" };

            var __textView2 = new TextView() { Text = "Unit Price", CssClass = "LabelText" };

            var __textView3 = new TextView() { Text = OrderItem.Product.FormattedPrice(), CssClass = "Right Price" };

            var __row3 = new Row() { CssClass = "TopBorder" };

            var __textView4 = new TextView() { Text = "Total Price", CssClass = "LabelText" };

            var __textView5 = new TextView() { Text = OrderItem.FormattedPrice(), CssClass = "Right Price" };

            var __row4 = new Row() { CssClass = "TopBorder" };

            var __textView6 = new TextView() { Text = "Remove", CssClass = "Remove" }.On(x => x.Tapped, () => OnRemove(OrderItem));

            Image.Id = "Image";
            Image.Path = Paths.Icons.Star;

            await __row1.AddRange(new View[] { __textView1, CountPicker });
            await __row2.AddRange(new View[] { __textView2, __textView3 });
            await __row3.AddRange(new View[] { __textView4, __textView5 });
            await __row4.Add(__textView6);
            await __stack1.AddRange(new View[] { Name, ShortCription, __row1, __row2, __row3, __row4 });
            await AddRange(new View[] { __stack1, Image });
        }
    }
}
#endregion

#region UI.Pages.CartPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Cart\CartPage.zbl")]
    partial class CartPage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.CartPage>
    {
        public ViewModel.CartPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.CartPage>();
        public Stack HeaderPrice = new Stack();
        public Button BuyButton = new Button();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Title = "Cart";

            HeaderPrice.Id = "HeaderPrice";
            HeaderPrice.Direction = RepeatDirection.Horizontal;

            var __textView1 = new TextView() { Text = "Total Price", CssClass = "Left" };

            var __textView2 = new TextView() { CssClass = "Right" }.Bind("Text", () => Model.Cart, x => x.FormattedTotalPrice());

            var __scrollView1 = new ScrollView() { CssClass = "Scroller" };

            var __textView3 = new TextView() { CssClass = "SpaceTight" };

            var __listView1 = new ListView<Domain.Models.OrderItem, Row>().Bind("DataSource", () => Model.Cart, c => c.OrderItems);

            var __textView4 = new TextView() { CssClass = "SpaceTight" };

            BuyButton.Id = "BuyButton";
            BuyButton.Text = "Buy";
            BuyButton.On(x => x.Tapped, () => Model.Buy());

            await HeaderPrice.AddRange(new View[] { __textView1, __textView2 });
            await __scrollView1.AddRange(new View[] { __textView3, __listView1, __textView4 });
            await Body.AddRange(new View[] { HeaderPrice, __scrollView1, BuyButton });
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Cart\CartPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.OrderItem>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __cartOrderCardItem1 = new CartOrderCardItem()
                {
                    ModelHolder = FindParent<CartPage>().Model,
                    OrderItem = Item,
                    OnRemove = orderItem => FindParent<CartPage>().Model.OnRemove(orderItem),
                    OnDataChanged = () => FindParent<CartPage>().Model.OnDataChanged()
                };

                await Add(__cartOrderCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.CategoryPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Category\CategoryPage.zbl")]
    partial class CategoryPage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.CategoryPage>
    {
        public ViewModel.CategoryPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.CategoryPage>();
        public ListView<Domain.Models.Product, Row> List = new ListView<Domain.Models.Product, Row>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Bind("Title", () => Model.Title);

            var __canvas1 = new Canvas();

            List.Id = "List";
            List.Bind("DataSource", () => Model.Products);

            await __canvas1.Add(List);
            await BodyScroller.Add(__canvas1);
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Category\CategoryPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.Product>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __pages_ProductCardItem1 = new Pages.ProductCardItem().Set(x => x.Model.Holder = FindParent<CategoryPage>().Model).Set(x => x.Model.Data = Item);

                await Add(__pages_ProductCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.ProductCardItem
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Category\ProductCardItem.zbl")]
    partial class ProductCardItem : Page, ITemplate<ViewModel.ProductCardItem>
    {
        public ViewModel.ProductCardItem Model = Zebble.Mvvm.ViewModel.The<ViewModel.ProductCardItem>();
        public Row CardItem = new Row();
        public Stack TextHolder = new Stack();
        public TextView Title = new TextView();
        public TextView Description = new TextView();
        public TextView Price = new TextView();
        public ImageView Image = new ImageView();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            CardItem.Id = "CardItem";
            CardItem.On(x => x.Tapped, () => ShowDetails());

            TextHolder.Id = "TextHolder";

            Title.Id = "Title";
            Title.Bind("Text", () => Model.Data, x => Model.Title());

            Description.Id = "Description";
            Description.Bind("Text", () => Model.Data, x => Model.ShortCription());

            Price.Id = "Price";
            Price.Bind("Text", () => Model.Data, x => Model.Price());

            Image.Id = "Image";
            Image.Path = UI.Paths.Icons.Star;
            Image.Stretch = Stretch.Fit;

            await TextHolder.AddRange(new View[] { Title, Description, Price });
            await CardItem.AddRange(new View[] { TextHolder, Image });
            await Add(CardItem);
        }
    }
}
#endregion

#region UI.Pages.HomePage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Home\HomePage.zbl")]
    partial class HomePage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.HomePage>
    {
        public ViewModel.HomePage Model = Zebble.Mvvm.ViewModel.The<ViewModel.HomePage>();
        public Carousel Body = new Carousel();
        public Tabs BottomNavBar = new Tabs();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Title = "Simple Shop";

            Body.Id = "Body";
            Body.ShowBullets = false;

            BottomNavBar.Id = "BottomNavBar";

            var __tabs_Tab1 = new Tabs.Tab()
            .On(v => v.Tapped, () => Model.TabSelected(Domain.Models.PageType.Category))
            .Set(x => x.Label.Text = "Category")
            .Set(x => x.Icon.Path = UI.Paths.Icons.Category)
            .Set(x => x.Icon.Style.Padding(4))
            .Set(x => x.Data["1"] = UI.Paths.Icons.Category)
            .Set(x => x.Data["2"] = UI.Paths.Icons.Category2);

            var __tabs_Tab2 = new Tabs.Tab()
            .On(v => v.Tapped, () => Model.TabSelected(Domain.Models.PageType.MostVisited))
            .Set(x => x.Label.Text = "Most Visited")
            .Set(x => x.Icon.Path = UI.Paths.Icons.Eye)
            .Set(x => x.Data["1"] = UI.Paths.Icons.Eye)
            .Set(x => x.Data["2"] = UI.Paths.Icons.Eye2);

            var __tabs_Tab3 = new Tabs.Tab()
            .On(v => v.Tapped, () => Model.TabSelected(Domain.Models.PageType.Popular))
            .Set(x => x.Label.Text = "Popular")
            .Set(x => x.Icon.Path = UI.Paths.Icons.Star)
            .Set(x => x.Icon.Style.Padding(2))
            .Set(x => x.Data["1"] = UI.Paths.Icons.Star)
            .Set(x => x.Data["2"] = UI.Paths.Icons.Star2);

            var __tabs_Tab4 = new Tabs.Tab()
            .On(v => v.Tapped, () => Model.TabSelected(Domain.Models.PageType.Offer))
            .Set(x => x.Label.Text = "Offer")
            .Set(x => x.Icon.Path = UI.Paths.Icons.Gift)
            .Set(x => x.Data["1"] = UI.Paths.Icons.Gift)
            .Set(x => x.Data["2"] = UI.Paths.Icons.Gift2);

            var __tabs_Tab5 = new Tabs.Tab()
            .On(v => v.Tapped, () => Model.TabSelected(Domain.Models.PageType.New))
            .Set(x => x.Label.Text = "New")
            .Set(x => x.Icon.Path = UI.Paths.Icons.New)
            .Set(x => x.Data["1"] = UI.Paths.Icons.New)
            .Set(x => x.Data["2"] = UI.Paths.Icons.New2);

            await BottomNavBar.AddRange(new View[] { __tabs_Tab1, __tabs_Tab2, __tabs_Tab3, __tabs_Tab4, __tabs_Tab5 });
            await AddRange(new View[] { Body, BottomNavBar });
        }
    }
}
#endregion

#region UI.Pages.LoginPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Login\LoginPage.zbl")]
    partial class LoginPage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.LoginPage>
    {
        public ViewModel.LoginPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.LoginPage>();
        public Stack LoginCard = new Stack();
        public FormField<TextInput> Username = new FormField<TextInput>();
        public FormField<TextInput> Password = new FormField<TextInput>();
        public CheckBox RememberMeCB = new CheckBox();
        public TextView SignupButton = new TextView();
        public Button LoginButton = new Button();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Title = "Authentication";

            var __row1 = new Row() { CssClass = "SpaceFiller" };

            LoginCard.Id = "LoginCard";

            Username.Id = "Username";
            Username.LabelText = "Username";
            Username.Bind("Value", () => Model.User, u => Model.Username).Set(x => x.Control.TextMode = TextMode.Auto);

            Password.Id = "Password";
            Password.LabelText = "Password";
            Password.Bind("Value", () => Model.User, u => Model.Password)
            .Set(x => x.Control.TextMode = TextMode.Password);

            var __row2 = new Row();

            RememberMeCB.Id = "RememberMeCB";
            RememberMeCB.AutoFlash = true;
            RememberMeCB.Bind("Checked", () => Model.User, u => u.Credential.StayLoggedIn);

            var __textView1 = new TextView() { Text = "Remember Me" }.On(x => x.Tapped, () => RememberMeCB.Toggle());

            var __textView2 = new TextView() { CssClass = "Hint" }.Bind("Text", () => Model.User, u => Model.Hint);

            SignupButton.Id = "SignupButton";
            SignupButton.Text = "New user? Signup now.";
            SignupButton.On(v => v.Tapped, () => Model.SignupTapped());

            var __row3 = new Row() { CssClass = "SpaceFiller" };

            LoginButton.Id = "LoginButton";
            LoginButton.Text = "Login";
            LoginButton.On(v => v.Tapped, () => Model.LoginTapped(Username.Text, Password.Text, RememberMeCB.Checked));

            await __row2.AddRange(new View[] { RememberMeCB, __textView1, __textView2 });
            await LoginCard.AddRange(new View[] { Username, Password, __row2 });
            await Body.AddRange(new View[] { __row1, LoginCard, SignupButton, __row3, LoginButton });
        }
    }
}
#endregion

#region UI.Pages.OrderCardItem
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\OrderInfo\OrderCardItem.zbl")]
    partial class OrderCardItem : Stack
    {
        public ImageView Image = new ImageView();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Tapped.Handle(() => ShowProductDetail(OrderItem.Product));

            Image.Id = "Image";
            Image.Path = UI.Paths.Icons.Star;

            var __row1 = new Row();

            var __textView1 = new TextView() { Text = "Price", CssClass = "Left" };

            var __textView2 = new TextView() { Text = OrderItem.FormattedPrice(), CssClass = "Right Price" };

            var __row2 = new Row();

            var __textView3 = new TextView() { Text = "Count", CssClass = "Left" };

            var __textView4 = new TextView() { Text = OrderItem.Count.ToString(), CssClass = "Right" };

            await __row1.AddRange(new View[] { __textView1, __textView2 });
            await __row2.AddRange(new View[] { __textView3, __textView4 });
            await AddRange(new View[] { Image, __row1, __row2 });
        }
    }
}
#endregion

#region UI.Pages.OrderInfoPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\OrderInfo\OrderInfoPage.zbl")]
    partial class OrderInfoPage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.OrderInfoPage>
    {
        public ViewModel.OrderInfoPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.OrderInfoPage>();
        public TextView Description = new TextView();
        public Grid OrderGrid = new Grid();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Title = "Order Info";

            var __row1 = new Row();

            Description.Id = "Description";
            Description.Bind("Text", () => Model.Order, x => x.Status.Description);

            OrderGrid.Id = "OrderGrid";
            OrderGrid.Columns = 2;

            await __row1.Add(Description);
            await BodyScroller.AddRange(new View[] { __row1, OrderGrid });
        }
    }
}
#endregion

#region UI.Pages.ProductDetailPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\ProductDetail\ProductDetailPage.zbl")]
    partial class ProductDetailPage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.ProductDetailPage>
    {
        public ViewModel.ProductDetailPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.ProductDetailPage>();
        public Stack InfoSection = new Stack();
        public ImageView Image = new ImageView();
        public TextView Name = new TextView();
        public TextView ShortCription = new TextView();
        public Stack BuySection = new Stack();
        public TextView Price = new TextView();
        public ImageView FavoriteButton = new ImageView();
        public IconButton CartButton = new IconButton();
        public Stack DescriptionSection = new Stack();
        public TextView Description = new TextView();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Title = "Product Detail";

            var __row1 = new Row();

            InfoSection.Id = "InfoSection";

            Image.Id = "Image";
            Image.Path = UI.Paths.Icons.Star;
            Image.Stretch = Stretch.Fit;

            Name.Id = "Name";
            Name.Bind("Text", () => Model.Data, d => d.Name);

            ShortCription.Id = "ShortCription";
            ShortCription.Bind("Text", () => Model.Data, d => d.ShortCription);

            var __row2 = new Row();

            BuySection.Id = "BuySection";

            var __canvas1 = new Canvas();

            Price.Id = "Price";
            Price.Bind("Text", () => Model.Data, d => d.FormattedPrice());

            FavoriteButton.Id = "FavoriteButton";
            FavoriteButton.On(x => x.Tapped, () => Model.OnFavoriteButtonClicked())
            .Bind("Path", () => Model.IsFavorite, d => d ? UI.Paths.Icons.Heart : UI.Paths.Icons.HeartGray);

            CartButton.Id = "CartButton";
            CartButton.Text = "Add To Cart";
            CartButton.IconPath = UI.Paths.Icons.Cart;
            CartButton.On(x => x.Tapped, () => Model.OnBuyButtonClicked());

            var __row3 = new Row();

            DescriptionSection.Id = "DescriptionSection";

            Description.Id = "Description";
            Description.Bind("Text", () => Model.Data, d => d.Description);

            var __modules_RatingBox1 = new Modules.RatingBox().Set(x => x.Model.Holder = Model).Set(x => x.Model.Data = Model.Data.Value);

            var __row4 = new Row() { CssClass = "Space" };

            await __canvas1.AddRange(new View[] { Price, FavoriteButton });
            await InfoSection.AddRange(new View[] { Image, Name, ShortCription });
            await BuySection.AddRange(new View[] { __canvas1, CartButton });
            await DescriptionSection.AddRange(new View[] { Description, __modules_RatingBox1 });
            await __row1.Add(InfoSection);
            await __row2.Add(BuySection);
            await __row3.Add(DescriptionSection);
            await BodyScroller.AddRange(new View[] { __row1, __row2, __row3, __row4 });
        }
    }
}
#endregion

#region UI.Pages.ProfilePage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Profile\ProfilePage.zbl")]
    partial class ProfilePage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.ProfilePage>
    {
        public ViewModel.ProfilePage Model = Zebble.Mvvm.ViewModel.The<ViewModel.ProfilePage>();
        public TextView InfoButton = new TextView();
        public Modules.ExpandableLayout InfoExpander = new Modules.ExpandableLayout();
        public TextView OrdersButton = new TextView();
        public Modules.ExpandableLayout OrdersExpander = new Modules.ExpandableLayout();
        public TextView FavoritesButton = new TextView();
        public Modules.ExpandableLayout FavoritesExpander = new Modules.ExpandableLayout();
        public ProfileFavoritesSubPage FavoritesSubPage = new ProfileFavoritesSubPage();
        public TextView SecurityButton = new TextView();
        public Modules.ExpandableLayout SecurityExpander = new Modules.ExpandableLayout();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Title = "Profile";

            var __row1 = new Row() { CssClass = "SpaceTight" };

            var __row2 = new Row();

            InfoButton.Id = "InfoButton";
            InfoButton.Text = "❖ Info";
            InfoButton.CssClass = "ProfileExpanderButton";
            InfoButton.On(x => x.Tapped, () => InfoExpander.Toggle());

            InfoExpander.Id = "InfoExpander";
            InfoExpander.ModelHolder = Model;

            var __profileInfoSubPage1 = new ProfileInfoSubPage().Set(x => x.Model.Holder = Model);

            var __row3 = new Row();

            OrdersButton.Id = "OrdersButton";
            OrdersButton.Text = "❖ Orders";
            OrdersButton.CssClass = "ProfileExpanderButton";
            OrdersButton.On(x => x.Tapped, () => OrdersExpander.Toggle());

            OrdersExpander.Id = "OrdersExpander";
            OrdersExpander.ModelHolder = Model;

            var __profileOrdersSubPage1 = new ProfileOrdersSubPage()
            .Set(x => x.Model.Orders.Value = Model.Orders.Value)
            .Set(x => x.Model.ShowOrderInfo = order => Model.ShowOrderInfo(order).RunInParallel());

            var __row4 = new Row();

            FavoritesButton.Id = "FavoritesButton";
            FavoritesButton.Text = "❖ Favorites";
            FavoritesButton.CssClass = "ProfileExpanderButton";
            FavoritesButton.On(x => x.Tapped, () => FavoritesExpander.Toggle());

            FavoritesExpander.Id = "FavoritesExpander";
            FavoritesExpander.ModelHolder = Model;

            FavoritesSubPage.Id = "FavoritesSubPage";
            FavoritesSubPage.Set(x => x.Model.ShowDetail = p => Model.ShowProductDetail(p).RunInParallel())
            .Set(x => x.Model.RefreshFavorites = () => Model.RefreshFavorites().RunInParallel());

            var __row5 = new Row();

            SecurityButton.Id = "SecurityButton";
            SecurityButton.Text = "❖ Security";
            SecurityButton.CssClass = "ProfileExpanderButton";
            SecurityButton.On(x => x.Tapped, () => SecurityExpander.Toggle());

            SecurityExpander.Id = "SecurityExpander";
            SecurityExpander.ModelHolder = Model;

            var __profileSecuritySubPage1 = new ProfileSecuritySubPage().Set(x => x.Model.Holder = Model);

            var __row6 = new Row() { CssClass = "SpaceTight" };

            await __row2.Add(InfoButton);
            await InfoExpander.Add(__profileInfoSubPage1);
            await __row3.Add(OrdersButton);
            await OrdersExpander.Add(__profileOrdersSubPage1);
            await __row4.Add(FavoritesButton);
            await FavoritesExpander.Add(FavoritesSubPage);
            await __row5.Add(SecurityButton);
            await SecurityExpander.Add(__profileSecuritySubPage1);
            await BodyScroller.AddRange(new View[] { __row1, __row2, InfoExpander, __row3, OrdersExpander, __row4, FavoritesExpander, __row5, SecurityExpander, __row6 });
        }
    }
}
#endregion

#region UI.Pages.SearchPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Search\SearchPage.zbl")]
    partial class SearchPage : UI.Templates.EzNavBarPage, ITemplate<ViewModel.SearchPage>
    {
        public ViewModel.SearchPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.SearchPage>();
        public TextInput SearchInput = new TextInput();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Title = "Search";

            SearchInput.Id = "SearchInput";
            SearchInput.Placeholder = "Enter your search keyword";
            SearchInput.On(x => x.UserTextChanged, () => Model.OnSearch(SearchInput.Text));

            var __scrollView1 = new ScrollView() { CssClass = "Scroller" };

            var __listView1 = new ListView<Domain.Models.Product, Row>().Bind("DataSource", () => Model.Results);

            await __scrollView1.Add(__listView1);
            await Body.AddRange(new View[] { SearchInput, __scrollView1 });
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Search\SearchPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.Product>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __productCardItem1 = new ProductCardItem().Set(x => x.Model.Holder = FindParent<SearchPage>().Model).Set(x => x.Model.Data = Item);

                await Add(__productCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.CategoryCardItem
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Home\Category\CategoryCardItem.zbl")]
    partial class CategoryCardItem : Page, ITemplate<ViewModel.CategoryCardItem>
    {
        public ViewModel.CategoryCardItem Model = Zebble.Mvvm.ViewModel.The<ViewModel.CategoryCardItem>();
        public Stack CardItem = new Stack();
        public TextView Name = new TextView();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            CardItem.Id = "CardItem";

            Name.Id = "Name";
            Name.Text = DataValue;

            await CardItem.Add(Name);
            await Add(CardItem);
        }
    }
}
#endregion

#region UI.Pages.CategorySubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Home\Category\CategorySubPage.zbl")]
    partial class CategorySubPage : Page, ITemplate<ViewModel.CategorySubPage>
    {
        public ViewModel.CategorySubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.CategorySubPage>();
        public Modules.FolderLayout<Domain.Models.Category, CategoryViewGen> FolderView = new Modules.FolderLayout<Domain.Models.Category, CategoryViewGen>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __scrollView1 = new ScrollView() { CssClass = "Scroller" };

            var __row1 = new Row() { CssClass = "SpaceTight" };

            FolderView.Id = "FolderView";
            FolderView.ModelHolder = Model.Holder;
            FolderView.OnItemSelected = data => Model.OnCategorySelected(data);
            FolderView.ViewGen = new CategoryViewGen();
            FolderView.Bind("FolderData", () => Model.Categories, x => Model.GetData());

            await __scrollView1.AddRange(new View[] { __row1, FolderView });
            await Add(__scrollView1);
        }
    }
}
#endregion

#region UI.Pages.MostVisitedSubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Home\MostVisit\MostVisitedSubPage.zbl")]
    partial class MostVisitedSubPage : Page, ITemplate<ViewModel.MostVisitedSubPage>
    {
        public ViewModel.MostVisitedSubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.MostVisitedSubPage>();
        public ListView<Domain.Models.Product, Row> List = new ListView<Domain.Models.Product, Row>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __scrollView1 = new ScrollView() { CssClass = "Scroller" };

            var __canvas1 = new Canvas();

            List.Id = "List";
            List.Bind("DataSource", () => Model.Products);

            await __canvas1.Add(List);
            await __scrollView1.Add(__canvas1);
            await Add(__scrollView1);
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Home\MostVisit\MostVisitedSubPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.Product>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __productCardItem1 = new ProductCardItem()
                .Set(x => x.Model.Holder = FindParent<MostVisitedSubPage>().Model.Holder)
                .Set(x => x.Model.Data = Item);

                await Add(__productCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.NewSubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Home\New\NewSubPage.zbl")]
    partial class NewSubPage : Page, ITemplate<ViewModel.NewSubPage>
    {
        public ViewModel.NewSubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.NewSubPage>();
        public ListView<Domain.Models.Product, Row> List = new ListView<Domain.Models.Product, Row>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __scrollView1 = new ScrollView() { CssClass = "Scroller" };

            var __canvas1 = new Canvas();

            List.Id = "List";
            List.Bind("DataSource", () => Model.Products);

            await __canvas1.Add(List);
            await __scrollView1.Add(__canvas1);
            await Add(__scrollView1);
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Home\New\NewSubPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.Product>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __productCardItem1 = new ProductCardItem().Set(x => x.Model.Holder = FindParent<NewSubPage>().Model.Holder).Set(x => x.Model.Data = Item);

                await Add(__productCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.OfferSubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Home\Offer\OfferSubPage.zbl")]
    partial class OfferSubPage : Page, ITemplate<ViewModel.OfferSubPage>
    {
        public ViewModel.OfferSubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.OfferSubPage>();
        public ListView<Domain.Models.Product, Row> List = new ListView<Domain.Models.Product, Row>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __scrollView1 = new ScrollView() { CssClass = "Scroller" };

            var __canvas1 = new Canvas();

            List.Id = "List";
            List.Bind("DataSource", () => Model.Products);

            await __canvas1.Add(List);
            await __scrollView1.Add(__canvas1);
            await Add(__scrollView1);
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Home\Offer\OfferSubPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.Product>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __productCardItem1 = new ProductCardItem().Set(x => x.Model.Holder = FindParent<OfferSubPage>().Model.Holder).Set(x => x.Model.Data = Item);

                await Add(__productCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.PopularSubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Home\Popular\PopularSubPage.zbl")]
    partial class PopularSubPage : Page, ITemplate<ViewModel.PopularSubPage>
    {
        public ViewModel.PopularSubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.PopularSubPage>();
        public ListView<Domain.Models.Product, Row> List = new ListView<Domain.Models.Product, Row>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __scrollView1 = new ScrollView() { CssClass = "Scroller" };

            var __canvas1 = new Canvas();

            List.Id = "List";
            List.Bind("DataSource", () => Model.Products);

            await __canvas1.Add(List);
            await __scrollView1.Add(__canvas1);
            await Add(__scrollView1);
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Home\Popular\PopularSubPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.Product>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __productCardItem1 = new ProductCardItem().Set(x => x.Model.Holder = FindParent<PopularSubPage>().Model.Holder).Set(x => x.Model.Data = Item);

                await Add(__productCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.ProfileFavoriteCardItem
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Profile\Favorites\ProfileFavoriteCardItem.zbl")]
    partial class ProfileFavoriteCardItem : Stack
    {
        public Stack TextHolder = new Stack();
        public TextView Name = new TextView();
        public TextView Remove = new TextView();
        public ImageView Image = new ImageView();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Tapped.Handle(() => ShowDetail(Favorite));

            var __row1 = new Row();

            TextHolder.Id = "TextHolder";

            Name.Id = "Name";
            Name.Text = Favorite.Name;

            var __canvas1 = new Canvas() { CssClass = "Divider" };

            Remove.Id = "Remove";
            Remove.Text = "Remove";
            Remove.On(x => x.Tapped, () => RemoveButtonClicked(Favorite));

            Image.Id = "Image";
            Image.Path = UI.Paths.Icons.Star;

            await TextHolder.AddRange(new View[] { Name, __canvas1, Remove });
            await __row1.AddRange(new View[] { TextHolder, Image });
            await Add(__row1);
        }
    }
}
#endregion

#region UI.Pages.ProfileFavoritesSubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Profile\Favorites\ProfileFavoritesSubPage.zbl")]
    partial class ProfileFavoritesSubPage : Stack, ITemplate<ViewModel.ProfileFavoritesSubPage>
    {
        public ViewModel.ProfileFavoritesSubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.ProfileFavoritesSubPage>();
        public ListView<Domain.Models.Product, Row> List = new ListView<Domain.Models.Product, Row>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            List.Id = "List";
            List.Bind("DataSource", () => Model.Favorites);

            await Add(List);
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Profile\Favorites\ProfileFavoritesSubPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.Product>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __profileFavoriteCardItem1 = new ProfileFavoriteCardItem()
                {
                    ModelHolder = FindParent<ProfileFavoritesSubPage>().Model.Holder,
                    Favorite = Item,
                    ShowDetail = p => FindParent<ProfileFavoritesSubPage>().Model.ShowDetail(p),
                    RemoveButtonClicked = p => FindParent<ProfileFavoritesSubPage>().Model.RemoveButtonClicked(p)
                };

                await Add(__profileFavoriteCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.ProfileInfoSubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Profile\Info\ProfileInfoSubPage.zbl")]
    partial class ProfileInfoSubPage : Stack, ITemplate<ViewModel.ProfileInfoSubPage>
    {
        public ViewModel.ProfileInfoSubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.ProfileInfoSubPage>();
        public Stack ProfileInfoCard = new Stack();
        public FormField<TextInput> FirstName = new FormField<TextInput>();
        public FormField<TextInput> LastName = new FormField<TextInput>();
        public ItemPicker<Domain.Models.Gender> Gender = new ItemPicker<Domain.Models.Gender>();
        public DatePicker BirthDate = new DatePicker();
        public FormField<TextInput> Email = new FormField<TextInput>();
        public FormField<TextInput> PhoneNumber = new FormField<TextInput>();
        public ItemPicker<string> Country = new ItemPicker<string>();
        public FormField<TextInput> State = new FormField<TextInput>();
        public FormField<TextInput> City = new FormField<TextInput>();
        public FormField<TextInput> StreetAddress = new FormField<TextInput>();
        public FormField<TextInput> ZipCode = new FormField<TextInput>();
        public Button SaveButton = new Button();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            ProfileInfoCard.Id = "ProfileInfoCard";

            FirstName.Id = "FirstName";
            FirstName.LabelText = "First Name";
            FirstName.Bind("Value", () => Model.User, u => u.FirstName)
            .Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.FirstName = FirstName.Text))
            .Set(x => x.Control.TextMode = TextMode.PersonName);

            LastName.Id = "LastName";
            LastName.LabelText = "Last Name";
            LastName.Bind("Value", () => Model.User, u => u.LastName)
            .Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.LastName = LastName.Text))
            .Set(x => x.Control.TextMode = TextMode.PersonName);

            var __row1 = new Row() { CssClass = "ItemPickerHolder" };

            var __textView1 = new TextView() { Text = "Gender", CssClass = "LabelText" };

            Gender.Id = "Gender";
            Gender.Placeholder = "dd/MM/yyyy";
            Gender.MultiSelect = false;
            Gender.Searchable = false;
            Gender.Bind("Source", () => Model.Genders)
            .Set(x => x.Label.Bind("Text", () => Model.User, u => u.Gender));

            var __row2 = new Row() { CssClass = "ItemPickerHolder" };

            var __textView2 = new TextView() { Text = "Birth Date", CssClass = "LabelText" };

            BirthDate.Id = "BirthDate";
            BirthDate.DayFormat = "d";
            BirthDate.TextFormat = "dd/MM/yyyy";
            BirthDate.YearFrom = 1900;
            BirthDate.YearTo = Model.MaxBirthYear;
            BirthDate.On(v => v.SelectedValueChanged, () => Model.User.Value.BirthDate = BirthDate.SelectedValue)
            .Set(x => x.Label.Bind("Text", () => Model.User, u => u.BirthDateString()));

            Email.Id = "Email";
            Email.LabelText = "E-Mail";
            Email.Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.Email = Email.Text))
            .Bind("Value", () => Model.User, u => u.Email)
            .Set(x => x.Control.TextMode = TextMode.Email);

            PhoneNumber.Id = "PhoneNumber";
            PhoneNumber.LabelText = "Phone Number";
            PhoneNumber.Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.PhoneNumber = PhoneNumber.Text))
            .Bind("Value", () => Model.User, u => u.PhoneNumber)
            .Set(x => x.Control.TextMode = TextMode.Telephone);

            var __textView3 = new TextView() { Text = "Address:", CssClass = "Section" };

            var __row3 = new Row() { CssClass = "ItemPickerHolder" };

            var __textView4 = new TextView() { Text = "Country", CssClass = "LabelText" };

            Country.Id = "Country";
            Country.MultiSelect = false;
            Country.Searchable = false;
            Country.Bind("Source", () => Model.Countries)
            .Set(x => x.Label.Bind("Text", () => Model.User, u => u.Address.Country));

            State.Id = "State";
            State.LabelText = "State";
            State.Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.Address.State = State.Text))
            .Bind("Value", () => Model.User, u => u.Address.State)
            .Set(x => x.Control.TextMode = TextMode.GeneralText);

            City.Id = "City";
            City.LabelText = "City";
            City.Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.Address.City = City.Text))
            .Bind("Value", () => Model.User, u => u.Address.City)
            .Set(x => x.Control.TextMode = TextMode.GeneralText);

            StreetAddress.Id = "StreetAddress";
            StreetAddress.LabelText = "Street Address";
            StreetAddress.Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.Address.StreetAddress = StreetAddress.Text))
            .Bind("Value", () => Model.User, u => u.Address.StreetAddress)
            .Set(x => x.Control.Lines = 2)
            .Set(x => x.Control.TextMode = TextMode.GeneralText);

            ZipCode.Id = "ZipCode";
            ZipCode.LabelText = "Zip Code";
            ZipCode.Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.Address.ZipCode = ZipCode.Text))
            .Bind("Value", () => Model.User, u => u.Address.ZipCode)
            .Set(x => x.Control.TextMode = TextMode.Integer);

            SaveButton.Id = "SaveButton";
            SaveButton.Text = "Save";
            SaveButton.On(v => v.Tapped, () => Model.OnSave(Gender.Label.Text, Country.Label.Text));

            await __row1.AddRange(new View[] { __textView1, Gender });
            await __row2.AddRange(new View[] { __textView2, BirthDate });
            await __row3.AddRange(new View[] { __textView4, Country });
            await ProfileInfoCard.AddRange(new View[] { FirstName, LastName, __row1, __row2, Email, PhoneNumber, __textView3, __row3, State, City, StreetAddress, ZipCode });
            await AddRange(new View[] { ProfileInfoCard, SaveButton });
        }
    }
}
#endregion

#region UI.Pages.ProfileOrderCardItem
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Profile\Orders\ProfileOrderCardItem.zbl")]
    partial class ProfileOrderCardItem : Stack
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __row1 = new Row();

            var __textView1 = new TextView() { Text = "Id", CssClass = "Left" };

            var __textView2 = new TextView() { Text = Order.Id.ToString(), CssClass = "Right" };

            var __row2 = new Row() { CssClass = "OrderInfo" }.On(x => x.Tapped, () => ShowInfo(Order));

            var __textView3 = new TextView() { Text = "Info", CssClass = "Left TopBorder" };

            var __textView4 = new TextView() { Text = ">", CssClass = "Right TopBorder" };

            var __row3 = new Row();

            var __textView5 = new TextView() { Text = "Date", CssClass = "Left" };

            var __textView6 = new TextView() { Text = Order.FormattedTime(), CssClass = "Right" };

            var __row4 = new Row();

            var __textView7 = new TextView() { Text = "Total Price", CssClass = "Left" };

            var __textView8 = new TextView() { Text = Order.FormattedTotalPrice(), CssClass = "Right  Price" };

            var __row5 = new Row();

            var __textView9 = new TextView() { Text = "Status", CssClass = "Left" };

            var __textView10 = new TextView() { Text = Order.Status.Status.ToString(), CssClass = "Right" };

            await __row1.AddRange(new View[] { __textView1, __textView2 });
            await __row2.AddRange(new View[] { __textView3, __textView4 });
            await __row3.AddRange(new View[] { __textView5, __textView6 });
            await __row4.AddRange(new View[] { __textView7, __textView8 });
            await __row5.AddRange(new View[] { __textView9, __textView10 });
            await AddRange(new View[] { __row1, __row2, __row3, __row4, __row5 });
        }
    }
}
#endregion

#region UI.Pages.ProfileOrdersSubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Profile\Orders\ProfileOrdersSubPage.zbl")]
    partial class ProfileOrdersSubPage : Stack, ITemplate<ViewModel.ProfileOrdersSubPage>
    {
        public ViewModel.ProfileOrdersSubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.ProfileOrdersSubPage>();
        public ListView<Domain.Models.Order, Row> List = new ListView<Domain.Models.Order, Row>();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            List.Id = "List";
            List.Bind("DataSource", () => Model.Orders);

            await Add(List);
        }

        [EscapeGCop("Auto-generated")]
        [SourceCode(@"Views\Pages\Profile\Orders\ProfileOrdersSubPage.zbl")]
        public partial class Row : ListViewItem<Domain.Models.Order>
        {
            protected override async Task InitializeFromMarkup()
            {
                await base.InitializeFromMarkup();

                var __profileOrderCardItem1 = new ProfileOrderCardItem()
                {
                    ModelHolder = FindParent<ProfileOrdersSubPage>().Model.Holder,
                    Order = Item,
                    ShowInfo = order => ((ProfileOrdersSubPage)(Parent.Parent)).Model.ShowOrderInfo(order)
                };

                await Add(__profileOrderCardItem1);
            }
            }}
        }
        #endregion

#region UI.Pages.ProfileSecuritySubPage
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Profile\Security\ProfileSecuritySubPage.zbl")]
    partial class ProfileSecuritySubPage : Stack, ITemplate<ViewModel.ProfileSecuritySubPage>
    {
        public ViewModel.ProfileSecuritySubPage Model = Zebble.Mvvm.ViewModel.The<ViewModel.ProfileSecuritySubPage>();
        public Stack ProfileSecurityCard = new Stack();
        public FormField<TextInput> Username = new FormField<TextInput>();
        public FormField<TextInput> Password = new FormField<TextInput>();
        public Button LogoutButton = new Button();
        public Button SaveButton = new Button();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            ProfileSecurityCard.Id = "ProfileSecurityCard";

            Username.Id = "Username";
            Username.LabelText = "Username";
            Username.Bind("Value", () => Model.User, u => u.Credential.Username)
            .Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.Credential.Username = Username.Text))
            .Set(x => x.Control.TextMode = TextMode.Auto);

            Password.Id = "Password";
            Password.LabelText = "Password";
            Password.Bind("Value", () => Model.User, u => u.Credential.Password)
            .Set(x => x.Control.On(v => v.UserTextChanged, () => Model.User.Value.Credential.Password = Password.Text))
            .Set(x => x.Control.TextMode = TextMode.Password);

            var __row1 = new Row();

            LogoutButton.Id = "LogoutButton";
            LogoutButton.Text = "Logout";
            LogoutButton.On(v => v.Tapped, () => Model.OnLogout());

            SaveButton.Id = "SaveButton";
            SaveButton.Text = "Save";
            SaveButton.On(v => v.Tapped, () => Model.OnSave());

            await ProfileSecurityCard.AddRange(new View[] { Username, Password });
            await __row1.AddRange(new View[] { LogoutButton, SaveButton });
            await AddRange(new View[] { ProfileSecurityCard, __row1 });
        }
    }
}
#endregion

namespace UI
{
    partial class StartUp
    {
        // Hashed content of all resources
        public override string GetResourcesVersion() => "SvndD33xripxE18tITCxXZcpEw";
    }
}
