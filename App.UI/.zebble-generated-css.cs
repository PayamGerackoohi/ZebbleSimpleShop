//----------------------
// <auto-generated>
//     GENERATED BY ZEBBLE
// </auto-generated>
#pragma warning disable  IDE0017, CS0108, CS0436
//----------------------

using System;
using Zebble;
using Zebble.Services;
using Zebble.Plugin;
using Zebble.Device;
using UI.Modules;
using UI.Pages;
using UI.Templates;
using System.Threading.Tasks;
using Olive;

namespace UI
{
    [EscapeGCop("Auto-generated")]
    public class CssStyles
    {
        public static void LoadAll()
        {
            // ======================================================================
            // App.UI\Styles\Common.css----------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CarouselCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CarouselBulletsContainerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CarouselBulletsContainerCarouselBulletCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CarouselBulletsContainerCarouselBulletActiveCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.AlertDialogCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.AlertDialogTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.AlertDialogMessageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.AlertDialogButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerDialogCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerDialogTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerDialogScrollViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerDialogScrollViewOptionsListCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerDialogScrollViewOptionsListSelectableItemViewCheckBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerDialogScrollViewOptionsListSelectableItemViewLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerDialogButtonsRowCancelButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ItemPickerDialogButtonsRowOkButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CheckBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CheckBoxCheckedCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerDialogCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerDialogTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerDialogDialogContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerDialogButtonsRowButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DrawingCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerPreviewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerDialogCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerDialogTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerDialogScrollViewStackIconButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerDialogScrollViewStackIconButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerDialogScrollViewStackIconButtonIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FilePickerDialogButtonsRowButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IndicatorCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IndicatorImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarLeftCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarLeftTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarLeftIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarLeftImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarRightTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarRightIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarRightImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TreeViewStackToggleIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FormFieldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FormFieldLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FormFieldTextInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastOKButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DisabledTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BodyScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SpaceCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SpaceTightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ErrorButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ErrorButtonButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomePageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomePageNavigationBarLeftRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomePageNavigationBarLeftRowBadgeCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomePageNavigationBarLeftRowImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomePageListViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomePageListViewContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HomePageBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageInfoSectionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageInfoSectionImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageInfoSectionNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageInfoSectionShortCriptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageBuySectionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageBuySectionFavoriteButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageBuySectionPriceCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageBuySectionCartButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageBuySectionCartButtonIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageBuySectionCartButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageDescriptionSectionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductDetailPageDescriptionSectionDescriptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.RatingBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.RatingBoxHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.RatingBoxHolderRatingIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.RatingBoxHolderRateTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryPageBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryPageListViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductCardItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductCardItemCardItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductCardItemCardItemTextHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductCardItemCardItemTextHolderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductCardItemCardItemTextHolderDescriptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductCardItemCardItemTextHolderPriceCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProductCardItemCardItemImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategorySubPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryCardItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryCardItemCardItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CategoryCardItemCardItemNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageErrorButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageProfileExpanderButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderProfileInfoCardCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderProfileInfoCardSectionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderProfileInfoCardItemPickerHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderProfileInfoCardItemPickerHolderLabelTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderProfileInfoCardItemPickerHolderItemPickerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderProfileInfoCardItemPickerHolderItemPickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderProfileInfoCardDatePickerLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderProfileInfoCardDatePickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageInfoExpanderSaveButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemOrderInfoCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemOrderInfoTopBorderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemLeftCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemPriceCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemTextHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemTextHolderNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemTextHolderDividerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemTextHolderRemoveCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageSecurityExpanderProfileSecurityCardCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageSecurityExpanderButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageSecurityExpanderSaveButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ProfilePageSecurityExpanderLogoutButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageDescriptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageOrderGridCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageOrderGridOrderCardItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageOrderGridOrderCardItemImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageOrderGridOrderCardItemLeftCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageOrderGridOrderCardItemRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OrderInfoPageOrderGridOrderCardItemPriceCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchPageTextInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchPageScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchPageScrollerListViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchPageScrollerListViewContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageHeaderPriceCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageHeaderPriceRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemNameCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemShortCriptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemLabelTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemPriceCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemRemoveCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemTopBorderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemItemPickerHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemItemPickerHolderItemPickerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemItemPickerHolderItemPickerLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageScrollViewCartOrderCardItemItemPickerHolderItemPickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CartPageBuyButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageSpaceFillerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageSpaceFillerHCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginCardCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginCardFormFieldLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginCardHintCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginCardRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginCardRowCheckBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginCardRowCheckBoxCheckedCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginCardRowCheckBoxCheckedImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginCardTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageSignupButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LoginPageLoginButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSignUpInfoCardCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSignUpInfoCardSectionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSignUpInfoCardItemPickerHolderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSignUpInfoCardItemPickerHolderLabelTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSignUpInfoCardItemPickerHolderItemPickerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSignUpInfoCardItemPickerHolderItemPickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSignUpInfoCardDatePickerLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSignUpInfoCardDatePickerCaretCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SignUpPageSaveButtonCssRule());

            // ======================================================================
            // App.UI\Styles\PlatformSpecific.css------------------------------------

            if (CssEngine.Platform == DevicePlatform.Windows)
            {
                CssEngine.Add(new File_App.UI.Styles.PlatformSpecific.TextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.PlatformSpecific.TextInputCssRule());
            }

            if (CssEngine.Platform == DevicePlatform.IOS)
            {
                CssEngine.Add(new File_App.UI.Styles.PlatformSpecific.TextInput_1CssRule());
                CssEngine.Add(new File_App.UI.Styles.PlatformSpecific.TextView_1CssRule());
            }

            if (CssEngine.Platform == DevicePlatform.Android)
            {
                CssEngine.Add(new File_App.UI.Styles.PlatformSpecific.TextInput_2CssRule());
                CssEngine.Add(new File_App.UI.Styles.PlatformSpecific.TextView_2CssRule());
            }
        }
    }
}

// Ensure auto-generated namespaces exist:
namespace UI.Modules { }
namespace UI.Pages { }
namespace UI.Templates { }
namespace Zebble.Plugin { }
namespace Zebble.Data { }

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/_Button.scss:2", "Button")]
    [CssBody("height: 32px; border: 1px solid #a3a2a2; border-radius: 16px; color: #484646;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Height = 32;
            view.Css.Border = new Border(1, "#a3a2a2");
            view.Css.Border.Radius = 16;
            view.Css.TextColor = "#484646";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/_Button.scss:9", "Button:disabled")]
    [CssBody("color: #a3a2a2; border: 1px solid #d1d1d1; border-radius: 16px;")]
    class ButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = "#a3a2a2";
            view.Css.Border = new Border(1, "#d1d1d1");
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:71", "TextView")]
    [CssBody("padding: 8px;")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Padding(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:75", "Carousel")]
    [CssBody("height: 100%;")]
    class CarouselCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Carousel

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Carousel)untypedView;
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:75", "Carousel #BulletsContainer")]
    [CssBody("padding: 32px; margin-left: calc(\"view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2\");")]
    class CarouselBulletsContainerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BulletsContainer

            view = CssEngine.FindParentByType<Carousel>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(32);
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:75", "Carousel #BulletsContainer Carousel-Bullet")]
    [CssBody("width: 8px; height: 8px; background-color: #eee; margin: 4px; border-radius: 8px;")]
    class CarouselBulletsContainerCarouselBulletCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Carousel-Bullet

            view = CssEngine.FindParentById(view, "BulletsContainer");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Carousel>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Carousel.Bullet)untypedView;
            view.Css.Height = 8;
            view.Css.Width = 8;
            view.Css.Margin(4);
            view.Css.BackgroundColor = "#eee";
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:75", "Carousel #BulletsContainer Carousel-Bullet:active")]
    [CssBody("background-color: #333;")]
    class CarouselBulletsContainerCarouselBulletActiveCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Carousel.Bullet && view.PseudoCssState.ContainsWholeWord("active"))) return false;

            view = CssEngine.FindParentById(view, "BulletsContainer");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Carousel>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Carousel.Bullet)untypedView;
            view.Css.BackgroundColor = "#333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:90", "AlertDialog")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-radius: 16px; margin: 16px; padding: 8px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class AlertDialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: AlertDialog

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (AlertDialog)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(16);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:90", "AlertDialog #Title")]
    [CssBody("padding: 8px; font-weight: bold;")]
    class AlertDialogTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<AlertDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Padding(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:90", "AlertDialog #Message")]
    [CssBody("padding: 8px;")]
    class AlertDialogMessageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Message

            view = CssEngine.FindParentByType<AlertDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:90", "AlertDialog Button")]
    [CssBody("margin: 8px;")]
    class AlertDialogButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentByType<AlertDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:97", "TextInput")]
    [CssBody("padding: 8px; margin: 8px; margin-top: 0; border-radius: 4px; border: 1px solid #aaaaaa;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Padding(8);
            view.Css.Margin(8);
            view.Css.Margin.Top = 0;
            view.Css.Border.Radius = 4;
            view.Css.Border = new Border(1, "#aaaaaa");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:105", "ItemPicker #Label")]
    [CssBody("padding: 8px;")]
    class ItemPickerLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<ItemPicker>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:105", "ItemPicker #Caret")]
    [CssBody("width: 40px; height: 40px;")]
    class ItemPickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<ItemPicker>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 40;
            view.Css.Width = 40;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:114", "ItemPickerDialog")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-radius: 16px; margin: 16px; padding: 8px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class ItemPickerDialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ItemPickerDialog

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ItemPickerDialog)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(16);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:114", "ItemPickerDialog #Title")]
    [CssBody("padding: 8px; margin: 8px;")]
    class ItemPickerDialogTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<ItemPickerDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:114", "ItemPickerDialog ScrollView")]
    [CssBody("height: calc(\"Content\");")]
    class ItemPickerDialogScrollViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ScrollView

            view = CssEngine.FindParentByType<ItemPickerDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ScrollView)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:114", "ItemPickerDialog ScrollView .options-list")]
    [CssBody("margin: 0px;")]
    class ItemPickerDialogScrollViewOptionsListCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .options-list

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ItemPickerDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(0);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:114", "ItemPickerDialog ScrollView .options-list SelectableItemView #CheckBox")]
    [CssBody("margin: 8px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class ItemPickerDialogScrollViewOptionsListSelectableItemViewCheckBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CheckBox

            view = CssEngine.FindParentByType<SelectableItemView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "options-list");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ItemPickerDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(8);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:114", "ItemPickerDialog ScrollView .options-list SelectableItemView #Label")]
    [CssBody("margin: 0px;")]
    class ItemPickerDialogScrollViewOptionsListSelectableItemViewLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<SelectableItemView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "options-list");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ItemPickerDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(0);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:114", "ItemPickerDialog #ButtonsRow #CancelButton")]
    [CssBody("margin: 8px; width: calc(\"Content\"); padding-left: 32px; padding-right: 32px; margin-left: calc(\"view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2\");")]
    class ItemPickerDialogButtonsRowCancelButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CancelButton

            view = CssEngine.FindParentById(view, "ButtonsRow");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ItemPickerDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Padding.Left = 32;
            view.Css.Padding.Right = 32;
            view.Css.Margin(8);
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:114", "ItemPickerDialog #ButtonsRow #OkButton")]
    [CssBody("margin: 8px;")]
    class ItemPickerDialogButtonsRowOkButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #OkButton

            view = CssEngine.FindParentById(view, "ButtonsRow");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ItemPickerDialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:143", "CheckBox")]
    [CssBody("width: 16px; height: 16px; border: 1px solid #aaaaaa; border-radius: 16px; background: transparent;")]
    class CheckBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CheckBox

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CheckBox)untypedView;
            view.Css.Height = 16;
            view.Css.Width = 16;
            view.Css.Border = new Border(1, "#aaaaaa");
            view.Css.Border.Radius = 16;
            view.Css.BackgroundColor = Colors.Transparent;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:143", "CheckBox:checked")]
    [CssBody("background-color: #aaaaaa;")]
    class CheckBoxCheckedCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is CheckBox && view.PseudoCssState.ContainsWholeWord("checked"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CheckBox)untypedView;
            view.Css.BackgroundColor = "#aaaaaa";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:151", "DatePicker #Label")]
    [CssBody("background-color: red; height: calc(\"Content\"); color: white; font-weight: bold; padding: 16px;")]
    class DatePickerLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<DatePicker>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Font.Bold = true;
            view.Css.Padding(16);
            view.Css.BackgroundColor = Colors.Red;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:151", "DatePicker #Caret")]
    [CssBody("background-color: blue; width: 50px; height: 50px;")]
    class DatePickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<DatePicker>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 50;
            view.Css.Width = 50;
            view.Css.BackgroundColor = Colors.Blue;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:159", "DatePicker-Dialog")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-radius: 16px; margin: 16px; padding: 8px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class DatePickerDialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: DatePicker-Dialog

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (DatePicker.Dialog)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(16);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:159", "DatePicker-Dialog #Title")]
    [CssBody("padding: 8px;")]
    class DatePickerDialogTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<DatePicker.Dialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:159", "DatePicker-Dialog #DialogContent")]
    [CssBody("padding: 8px;")]
    class DatePickerDialogDialogContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #DialogContent

            view = CssEngine.FindParentByType<DatePicker.Dialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:159", "DatePicker-Dialog #ButtonsRow > Button")]
    [CssBody("margin: 8px;")]
    class DatePickerDialogButtonsRowButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = view.parent;

            if (view == null) return false;
            else if (!(view.Id == "ButtonsRow")) return false;

            view = CssEngine.FindParentByType<DatePicker.Dialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:175", "Drawing")]
    [CssBody("height: 500px;")]
    class DrawingCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Drawing

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Drawing)untypedView;
            view.Css.Height = 500;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:177", "FilePicker")]
    [CssBody("height: 64px;")]
    class FilePickerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: FilePicker

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (FilePicker)untypedView;
            view.Css.Height = 64;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:177", "FilePicker Button")]
    [CssBody("border-radius: 0; margin: 16px;")]
    class FilePickerButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentByType<FilePicker>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Margin(16);
            view.Css.Border.Radius = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:177", "FilePicker #Preview")]
    [CssBody("width: 64px; height: 64px; background-color: blue;")]
    class FilePickerPreviewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Preview

            view = CssEngine.FindParentByType<FilePicker>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 64;
            view.Css.Width = 64;
            view.Css.BackgroundColor = Colors.Blue;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:188", "FilePicker-Dialog")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-radius: 16px; margin: 16px; padding: 8px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class FilePickerDialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: FilePicker-Dialog

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (FilePicker.Dialog)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(16);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:188", "FilePicker-Dialog #Title")]
    [CssBody("padding: 16px; font-weight: bold;")]
    class FilePickerDialogTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<FilePicker.Dialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Padding(16);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:188", "FilePicker-Dialog ScrollView Stack IconButton")]
    [CssBody("height: calc(\"Content\"); border: 1px solid #aaaaaa; margin: 8px; padding: 8px;")]
    class FilePickerDialogScrollViewStackIconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            view = CssEngine.FindParentByType<Stack>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<FilePicker.Dialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(8);
            view.Css.Border = new Border(1, "#aaaaaa");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:188", "FilePicker-Dialog ScrollView Stack IconButton #TextView")]
    [CssBody("margin: 8px; padding-left: 64px; height: calc(\"Container\");")]
    class FilePickerDialogScrollViewStackIconButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentByType<IconButton>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<Stack>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<FilePicker.Dialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.Padding.Left = 64;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:188", "FilePicker-Dialog ScrollView Stack IconButton #Icon")]
    [CssBody("width: 64px; height: 64px; background-color: red;")]
    class FilePickerDialogScrollViewStackIconButtonIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByType<IconButton>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<Stack>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<FilePicker.Dialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 64;
            view.Css.Width = 64;
            view.Css.BackgroundColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:188", "FilePicker-Dialog #ButtonsRow Button")]
    [CssBody("margin: 16px;")]
    class FilePickerDialogButtonsRowButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentById(view, "ButtonsRow");

            if (view is null) return false;

            view = CssEngine.FindParentByType<FilePicker.Dialog>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Margin(16);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:228", "#Indicator")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-radius: 16px; margin: 16px; padding: 8px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\"); margin-left: calc(\"view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2\"); width: 100px; height: 100px;")]
    class IndicatorCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Indicator

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Height = 100;
            view.Css.Width = 100;
            view.Css.Padding(8);
            view.Css.Margin(16);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:228", "#Indicator ImageView")]
    [CssBody("width: 100%; height: 100%;")]
    class IndicatorImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = CssEngine.FindParentById(view, "Indicator");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar")]
    [CssBody("background-color: #00b9f0;")]
    class NavigationBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: NavigationBar

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (NavigationBar)untypedView;
            view.Css.BackgroundColor = "#00b9f0";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Title")]
    [CssBody("padding: 24px; text-align: center; font-weight: bold; color: white;")]
    class NavigationBarTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Padding(24);
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Left")]
    [CssBody("padding: 8px;")]
    class NavigationBarLeftCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Left

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Left #TextView")]
    [CssBody("height: calc(\"Container\"); color: white; font-size: 7vw;")]
    class NavigationBarLeftTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentById(view, "Left");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.Font.Size = View.Root.ActualWidth * (7/ 100f);
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Left #Icon")]
    [CssBody("width: calc(\"Content\"); margin: 8px;")]
    class NavigationBarLeftIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentById(view, "Left");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Left ImageView")]
    [CssBody("width: calc(\"Content\"); margin: 8px;")]
    class NavigationBarLeftImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = CssEngine.FindParentById(view, "Left");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Right")]
    [CssBody("padding: 8px;")]
    class NavigationBarRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Right

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Right #TextView")]
    [CssBody("height: calc(\"Container\"); color: white; font-size: 7vw;")]
    class NavigationBarRightTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentById(view, "Right");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.Font.Size = View.Root.ActualWidth * (7/ 100f);
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Right #Icon")]
    [CssBody("width: calc(\"Content\"); margin: 8px;")]
    class NavigationBarRightIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentById(view, "Right");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:238", "NavigationBar #Right ImageView")]
    [CssBody("width: calc(\"Content\"); margin: 8px;")]
    class NavigationBarRightImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = CssEngine.FindParentById(view, "Right");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:267", "Tabs")]
    [CssBody("padding-top: 8px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => ph - ppt - ppb - vh\"); background-color: #00b9f0; z-index: 10;")]
    class TabsCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Tabs)untypedView;
            view.Css.Padding.Top = 8;
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => ph - ppt - ppb - vh);
            view.Css.BackgroundColor = "#00b9f0";
            view.Css.ZIndex = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:267", "Tabs Tabs-Tab #Icon")]
    [CssBody("background-position: center;")]
    class TabsTabsTabIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:267", "Tabs Tabs-Tab #Label")]
    [CssBody("font-size: 3vw; text-align: center; padding-left: 4px; padding-right: 4px;")]
    class TabsTabsTabLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.Padding.Left = 4;
            view.Css.Padding.Right = 4;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:278", "TreeView Stack .toggle-icon")]
    [CssBody("width: calc(\"Content\");")]
    class TreeViewStackToggleIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .toggle-icon

            view = CssEngine.FindParentByType<Stack>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<TreeView>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:285", "FormField")]
    [CssBody("padding: 4px;")]
    class FormFieldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: FormField

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (FormField)untypedView;
            view.Css.Padding(4);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:285", "FormField #Label")]
    [CssBody("width: 35%; font-size: 3.5fvw; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class FormFieldLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<FormField>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 35.Percent();
            view.Css.Font.Size = View.Root.ActualWidth * (3.5f/ 100f);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:285", "FormField TextInput")]
    [CssBody("margin: 0;")]
    class FormFieldTextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            view = CssEngine.FindParentByType<FormField>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Margin(0);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:295", "Toast")]
    [CssBody("background-color: rgba(1, 1, 1, 0.7); padding: 8px; margin: 16px; border-radius: 8px;")]
    class ToastCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Toast

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Toast)untypedView;
            view.Css.Padding(8);
            view.Css.Margin(16);
            view.Css.BackgroundColor = "#010101 70%";
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:295", "Toast #Label")]
    [CssBody("color: white;")]
    class ToastLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Toast>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:295", "Toast #OKButton")]
    [CssBody("color: white;")]
    class ToastOKButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #OKButton

            view = CssEngine.FindParentByType<Toast>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Components/Defaults.scss:304", ".DisabledText")]
    [CssBody("background-color: darkgray; color: white;")]
    class DisabledTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .DisabledText

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.DarkGray;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:13", "#BodyScroller")]
    [CssBody("height: calc(\"Container\");")]
    class BodyScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BodyScroller

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:14", "#Body")]
    [CssBody("height: calc(\"Container\");")]
    class BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:15", ".Scroller")]
    [CssBody("height: calc(\"Container\");")]
    class ScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Scroller

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:16", ".Space")]
    [CssBody("height: 16px;")]
    class SpaceCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Space

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:17", ".SpaceTight")]
    [CssBody("height: 8px;")]
    class SpaceTightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SpaceTight

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:19", ".ErrorButton")]
    [CssBody("padding: 16px;")]
    class ErrorButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ErrorButton

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(16);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:19", ".ErrorButton Button")]
    [CssBody("background-color: red; color: white;")]
    class ErrorButtonButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentByCssClass(view, "ErrorButton");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.BackgroundColor = Colors.Red;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:24", "HomePage")]
    [CssBody("background-color: #eaeaea;")]
    class HomePageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: HomePage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (HomePage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:24", "HomePage NavigationBar #Left Row")]
    [CssBody("width: 30px; height: 30px; margin: 8px;")]
    class HomePageNavigationBarLeftRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Row

            view = CssEngine.FindParentById(view, "Left");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<HomePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Row)untypedView;
            view.Css.Height = 30;
            view.Css.Width = 30;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:24", "HomePage NavigationBar #Left Row #Badge")]
    [CssBody("width: 24px; height: 24px; font-size: 12px; color: #00b9f0; background-color: white; border-radius: 16px; padding: 4px; margin-left: -12px; margin-top: -8px; font-weight: bold; text-align: center;")]
    class HomePageNavigationBarLeftRowBadgeCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Badge

            view = CssEngine.FindParentByType<Row>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Left");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<HomePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 24;
            view.Css.Width = 24;
            view.Css.Font.Size = 12;
            view.Css.Font.Bold = true;
            view.Css.Padding(4);
            view.Css.Margin.Left = -12;
            view.Css.Margin.Top = -8;
            view.Css.TextColor = "#00b9f0";
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 16;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:24", "HomePage NavigationBar #Left Row ImageView")]
    [CssBody("margin: 0;")]
    class HomePageNavigationBarLeftRowImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = CssEngine.FindParentByType<Row>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "Left");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<HomePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Margin(0);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:24", "HomePage ListView")]
    [CssBody("padding-top: 16px;")]
    class HomePageListViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListView

            view = CssEngine.FindParentByType<HomePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListView)untypedView;
            view.Css.Padding.Top = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:24", "HomePage ListView #Content")]
    [CssBody("margin: 16px; margin-top: 0; margin-bottom: 0;")]
    class HomePageListViewContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Content

            view = CssEngine.FindParentByType<ListView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<HomePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(16);
            view.Css.Margin.Top = 0;
            view.Css.Margin.Bottom = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:24", "HomePage #Body")]
    [CssBody("height: calc(\"Container\");")]
    class HomePageBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<HomePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage")]
    [CssBody("background-color: #eaeaea;")]
    class ProductDetailPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ProductDetailPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ProductDetailPage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #Body")]
    [CssBody("height: calc(\"Content\");")]
    class ProductDetailPageBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #InfoSection")]
    [CssBody("background-color: white;")]
    class ProductDetailPageInfoSectionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #InfoSection

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #InfoSection #Image")]
    [CssBody("width: calc(\"Container\"); height: 30vh; background-position: center;")]
    class ProductDetailPageInfoSectionImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Image

            view = CssEngine.FindParentById(view, "InfoSection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = new Length.BindingLengthRequest(View.Root.Height, y=> y * (30/ 100f));
            view.Css.Width = Length.AutoStrategy.Container;
            view.Css.BackgroundImageAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #InfoSection #Name")]
    [CssBody("font-size: 5vw; font-weight: bold; margin: 8px;")]
    class ProductDetailPageInfoSectionNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Name

            view = CssEngine.FindParentById(view, "InfoSection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (5/ 100f);
            view.Css.Font.Bold = true;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #InfoSection #ShortCription")]
    [CssBody("font-size: 3vw; color: gray; margin: 8px; padding: 8px;")]
    class ProductDetailPageInfoSectionShortCriptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ShortCription

            view = CssEngine.FindParentById(view, "InfoSection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.Padding(8);
            view.Css.Margin(8);
            view.Css.TextColor = Colors.Gray;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #BuySection")]
    [CssBody("background-color: white; margin: 16px 16px 0 16px; border-radius: 8px;")]
    class ProductDetailPageBuySectionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BuySection

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(top: 16, right: 16, bottom: 0, left: 16);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #BuySection #FavoriteButton")]
    [CssBody("height: calc(\"Container\"); width: calc(\"Content\"); background-position: center; padding: 8px; margin-left: 8px;")]
    class ProductDetailPageBuySectionFavoriteButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #FavoriteButton

            view = CssEngine.FindParentById(view, "BuySection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin.Left = 8;
            view.Css.BackgroundImageAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #BuySection #Price")]
    [CssBody("text-align: center; font-size: 4vw; font-weight: bold; color: green; padding: 16px;")]
    class ProductDetailPageBuySectionPriceCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Price

            view = CssEngine.FindParentById(view, "BuySection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (4/ 100f);
            view.Css.Font.Bold = true;
            view.Css.Padding(16);
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = Colors.Green;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #BuySection #CartButton")]
    [CssBody("background-color: green; padding: 8px;")]
    class ProductDetailPageBuySectionCartButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CartButton

            view = CssEngine.FindParentById(view, "BuySection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);
            view.Css.BackgroundColor = Colors.Green;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #BuySection #CartButton #Icon")]
    [CssBody("padding-left: 8px; height: calc(\"Container\");")]
    class ProductDetailPageBuySectionCartButtonIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentById(view, "CartButton");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "BuySection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.Padding.Left = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #BuySection #CartButton #TextView")]
    [CssBody("text-align: center; font-size: 4vw; color: white;")]
    class ProductDetailPageBuySectionCartButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentById(view, "CartButton");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "BuySection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (4/ 100f);
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #DescriptionSection")]
    [CssBody("background-color: white; margin: 16px 16px 0 16px; border-radius: 8px;")]
    class ProductDetailPageDescriptionSectionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #DescriptionSection

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(top: 16, right: 16, bottom: 0, left: 16);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:62", "ProductDetailPage #DescriptionSection #Description")]
    [CssBody("font-size: 4vw; margin: 8px;")]
    class ProductDetailPageDescriptionSectionDescriptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Description

            view = CssEngine.FindParentById(view, "DescriptionSection");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductDetailPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (4/ 100f);
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:108", "RatingBox")]
    [CssBody("height: calc(\"Content\");")]
    class RatingBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: RatingBox

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (RatingBox)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:108", "RatingBox #Holder")]
    [CssBody("padding: 16px;")]
    class RatingBoxHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Holder

            view = CssEngine.FindParentByType<RatingBox>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(16);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:108", "RatingBox #Holder .RatingIcon")]
    [CssBody("width: 6vw; height: 6vw; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class RatingBoxHolderRatingIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .RatingIcon

            view = CssEngine.FindParentById(view, "Holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<RatingBox>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = new Length.BindingLengthRequest(View.Root.Width, x => x * (6/ 100f));
            view.Css.Width = new Length.BindingLengthRequest(View.Root.Width, x => x * (6/ 100f));
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:108", "RatingBox #Holder #RateText")]
    [CssBody("margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\"); font-size: 3vw;")]
    class RatingBoxHolderRateTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #RateText

            view = CssEngine.FindParentById(view, "Holder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<RatingBox>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:124", "CategoryPage")]
    [CssBody("background-color: #eaeaea;")]
    class CategoryPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CategoryPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CategoryPage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:124", "CategoryPage #Body")]
    [CssBody("height: calc(\"Content\");")]
    class CategoryPageBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<CategoryPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:124", "CategoryPage ListView")]
    [CssBody("margin: 16px; margin-bottom: 0;")]
    class CategoryPageListViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListView

            view = CssEngine.FindParentByType<CategoryPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListView)untypedView;
            view.Css.Margin(16);
            view.Css.Margin.Bottom = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:132", "ProductCardItem")]
    [CssBody("height: calc(\"Content\");")]
    class ProductCardItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ProductCardItem

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ProductCardItem)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:132", "ProductCardItem #CardItem")]
    [CssBody("height: calc(\"Content\"); background: white; border-radius: 8px;")]
    class ProductCardItemCardItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CardItem

            view = CssEngine.FindParentByType<ProductCardItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:132", "ProductCardItem #CardItem #TextHolder")]
    [CssBody("margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\"); padding: 8px;")]
    class ProductCardItemCardItemTextHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextHolder

            view = CssEngine.FindParentById(view, "CardItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductCardItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(8);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:132", "ProductCardItem #CardItem #TextHolder #Title")]
    [CssBody("font-size: 5vw; font-weight: bold;")]
    class ProductCardItemCardItemTextHolderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentById(view, "TextHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "CardItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductCardItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (5/ 100f);
            view.Css.Font.Bold = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:132", "ProductCardItem #CardItem #TextHolder #Description")]
    [CssBody("font-size: 3vw; color: gray;")]
    class ProductCardItemCardItemTextHolderDescriptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Description

            view = CssEngine.FindParentById(view, "TextHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "CardItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductCardItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.TextColor = Colors.Gray;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:132", "ProductCardItem #CardItem #TextHolder #Price")]
    [CssBody("font-size: 3vw; color: green; margin-left: 8px; padding-left: 0; border-top: 1px solid #aaaaaa;")]
    class ProductCardItemCardItemTextHolderPriceCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Price

            view = CssEngine.FindParentById(view, "TextHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "CardItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductCardItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.Padding.Left = 0;
            view.Css.Margin.Left = 8;
            view.Css.TextColor = Colors.Green;
            view.Css.Border = new Border { Top = 1, Color = "#aaaaaa"};

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:132", "ProductCardItem #CardItem #Image")]
    [CssBody("width: 30%; height: calc(\"Content\"); background-position: center; padding: 16px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class ProductCardItemCardItemImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Image

            view = CssEngine.FindParentById(view, "CardItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProductCardItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Width = 30.Percent();
            view.Css.Padding(16);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.BackgroundImageAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:152", "CategorySubPage")]
    [CssBody("padding: 8px; padding-top: 0; padding-bottom: 0;")]
    class CategorySubPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CategorySubPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CategorySubPage)untypedView;
            view.Css.Padding(8);
            view.Css.Padding.Top = 0;
            view.Css.Padding.Bottom = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:158", "CategoryCardItem")]
    [CssBody("height: calc(\"Content\"); padding: 0 8px 0 8px; margin-top: -8px;")]
    class CategoryCardItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CategoryCardItem

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CategoryCardItem)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(top: 0, right: 8, bottom: 0, left: 8);
            view.Css.Margin.Top = -8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:158", "CategoryCardItem #CardItem")]
    [CssBody("height: calc(\"Content\"); background: white; border-bottom-left-radius: 8px; border-top-right-radius: 8px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\"); padding: 8px;")]
    class CategoryCardItemCardItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CardItem

            view = CssEngine.FindParentByType<CategoryCardItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.RadiusBottomLeft = 8;
            view.Css.Border.RadiusTopRight = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:158", "CategoryCardItem #CardItem #Name")]
    [CssBody("font-size: 3vw; font-weight: bold;")]
    class CategoryCardItemCardItemNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Name

            view = CssEngine.FindParentById(view, "CardItem");

            if (view is null) return false;

            view = CssEngine.FindParentByType<CategoryCardItem>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.Font.Bold = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage")]
    [CssBody("background-color: #eaeaea;")]
    class ProfilePageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ProfilePage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ProfilePage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #Body")]
    [CssBody("height: calc(\"Content\");")]
    class ProfilePageBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage .ErrorButton")]
    [CssBody("padding-bottom: 0;")]
    class ProfilePageErrorButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ErrorButton

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Bottom = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage .ProfileExpanderButton")]
    [CssBody("background-color: white; font-size: 4vw; font-weight: bold; padding: 16px; border-top-right-radius: 16px; border-bottom-left-radius: 16px; margin: 16px; margin-top: 8px; margin-bottom: 8px;")]
    class ProfilePageProfileExpanderButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ProfileExpanderButton

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (4/ 100f);
            view.Css.Font.Bold = true;
            view.Css.Padding(16);
            view.Css.Margin(16);
            view.Css.Margin.Top = 8;
            view.Css.Margin.Bottom = 8;
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.RadiusTopRight = 16;
            view.Css.Border.RadiusBottomLeft = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #ProfileInfoCard")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-top-right-radius: 16px; border-bottom-left-radius: 16px; padding: 8px; margin: 8px 16px 8px 16px;")]
    class ProfilePageInfoExpanderProfileInfoCardCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ProfileInfoCard

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(top: 8, right: 16, bottom: 8, left: 16);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.RadiusTopRight = 16;
            view.Css.Border.RadiusBottomLeft = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #ProfileInfoCard .Section")]
    [CssBody("padding-top: 16px; font-weight: bold;")]
    class ProfilePageInfoExpanderProfileInfoCardSectionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Section

            view = CssEngine.FindParentById(view, "ProfileInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Padding.Top = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #ProfileInfoCard .ItemPickerHolder")]
    [CssBody("padding: 4px;")]
    class ProfilePageInfoExpanderProfileInfoCardItemPickerHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ItemPickerHolder

            view = CssEngine.FindParentById(view, "ProfileInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(4);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #ProfileInfoCard .ItemPickerHolder .LabelText")]
    [CssBody("width: 35%; font-size: 3.5fvw; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class ProfilePageInfoExpanderProfileInfoCardItemPickerHolderLabelTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .LabelText

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "ProfileInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 35.Percent();
            view.Css.Font.Size = View.Root.ActualWidth * (3.5f/ 100f);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #ProfileInfoCard .ItemPickerHolder ItemPicker")]
    [CssBody("border: 1px solid #AAAAAA; margin: 0;")]
    class ProfilePageInfoExpanderProfileInfoCardItemPickerHolderItemPickerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ItemPicker

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "ProfileInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ItemPicker)untypedView;
            view.Css.Margin(0);
            view.Css.Border = new Border(1, "#AAAAAA");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #ProfileInfoCard .ItemPickerHolder ItemPicker #Caret")]
    [CssBody("display: none;")]
    class ProfilePageInfoExpanderProfileInfoCardItemPickerHolderItemPickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<ItemPicker>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "ProfileInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override async Task Apply(View view)
        {
            await view.Css.IgnoredAsync(true);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #ProfileInfoCard DatePicker #Label")]
    [CssBody("font-size: 3.5fvw; background-color: transparent; color: black; font-weight: normal; border: 1px solid #AAAAAA; padding: 8px; margin: 0;")]
    class ProfilePageInfoExpanderProfileInfoCardDatePickerLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<DatePicker>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "ProfileInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3.5f/ 100f);
            view.Css.Font.Bold = false;
            view.Css.Padding(8);
            view.Css.Margin(0);
            view.Css.BackgroundColor = Colors.Transparent;
            view.Css.TextColor = Colors.Black;
            view.Css.Border = new Border(1, "#AAAAAA");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #ProfileInfoCard DatePicker #Caret")]
    [CssBody("display: none;")]
    class ProfilePageInfoExpanderProfileInfoCardDatePickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<DatePicker>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "ProfileInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override async Task Apply(View view)
        {
            await view.Css.IgnoredAsync(true);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #InfoExpander #SaveButton")]
    [CssBody("background-color: green; color: white; margin: 8px 16px 8px 16px;")]
    class ProfilePageInfoExpanderSaveButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #SaveButton

            view = CssEngine.FindParentById(view, "InfoExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(top: 8, right: 16, bottom: 8, left: 16);
            view.Css.BackgroundColor = Colors.Green;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #OrdersExpander ProfileOrdersSubPage ProfileOrderCardItem")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-top-right-radius: 16px; border-bottom-left-radius: 16px; padding: 8px; margin: 8px 16px 8px 16px; margin-top: 8px; margin-bottom: 8px;")]
    class ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ProfileOrderCardItem

            view = CssEngine.FindParentByType<ProfileOrdersSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrdersExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ProfileOrderCardItem)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(top: 8, right: 16, bottom: 8, left: 16);
            view.Css.Margin.Top = 8;
            view.Css.Margin.Bottom = 8;
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.RadiusTopRight = 16;
            view.Css.Border.RadiusBottomLeft = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #OrdersExpander ProfileOrdersSubPage ProfileOrderCardItem .OrderInfo")]
    [CssBody("border-bottom: 1px solid #AAAAAA;")]
    class ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemOrderInfoCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .OrderInfo

            view = CssEngine.FindParentByType<ProfileOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileOrdersSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrdersExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Border = new Border { Bottom = 1, Color = "#AAAAAA"};

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #OrdersExpander ProfileOrdersSubPage ProfileOrderCardItem .OrderInfo .TopBorder")]
    [CssBody("border-top: 1px solid #AAAAAA; color: dodgerblue;")]
    class ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemOrderInfoTopBorderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .TopBorder

            view = CssEngine.FindParentByCssClass(view, "OrderInfo");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileOrdersSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrdersExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Border = new Border { Top = 1, Color = "#AAAAAA"};
            view.Css.TextColor = Colors.DodgerBlue;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #OrdersExpander ProfileOrdersSubPage ProfileOrderCardItem .Left")]
    [CssBody("width: calc(\"Content\");")]
    class ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemLeftCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Left

            view = CssEngine.FindParentByType<ProfileOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileOrdersSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrdersExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #OrdersExpander ProfileOrdersSubPage ProfileOrderCardItem .Right")]
    [CssBody("text-align: right;")]
    class ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Right

            view = CssEngine.FindParentByType<ProfileOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileOrdersSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrdersExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Right;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #OrdersExpander ProfileOrdersSubPage ProfileOrderCardItem .Price")]
    [CssBody("color: green;")]
    class ProfilePageOrdersExpanderProfileOrdersSubPageProfileOrderCardItemPriceCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Price

            view = CssEngine.FindParentByType<ProfileOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileOrdersSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrdersExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Green;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #FavoritesExpander ProfileFavoritesSubPage ProfileFavoriteCardItem")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-top-right-radius: 16px; border-bottom-left-radius: 16px; padding: 8px; margin: 8px 16px 8px 16px;")]
    class ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ProfileFavoriteCardItem

            view = CssEngine.FindParentByType<ProfileFavoritesSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "FavoritesExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ProfileFavoriteCardItem)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(top: 8, right: 16, bottom: 8, left: 16);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.RadiusTopRight = 16;
            view.Css.Border.RadiusBottomLeft = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #FavoritesExpander ProfileFavoritesSubPage ProfileFavoriteCardItem #TextHolder")]
    [CssBody("height: calc(\"Container\");")]
    class ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemTextHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextHolder

            view = CssEngine.FindParentByType<ProfileFavoriteCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileFavoritesSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "FavoritesExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #FavoritesExpander ProfileFavoritesSubPage ProfileFavoriteCardItem #TextHolder #Name")]
    [CssBody("height: calc(\"Container\"); font-size: 4vw; font-weight: bold; margin-bottom: 16px;")]
    class ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemTextHolderNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Name

            view = CssEngine.FindParentById(view, "TextHolder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileFavoriteCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileFavoritesSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "FavoritesExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.Font.Size = View.Root.ActualWidth * (4/ 100f);
            view.Css.Font.Bold = true;
            view.Css.Margin.Bottom = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #FavoritesExpander ProfileFavoritesSubPage ProfileFavoriteCardItem #TextHolder .Divider")]
    [CssBody("height: 1px; background-color: #AAAAAA; margin: 1px;")]
    class ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemTextHolderDividerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Divider

            view = CssEngine.FindParentById(view, "TextHolder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileFavoriteCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileFavoritesSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "FavoritesExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 1;
            view.Css.Margin(1);
            view.Css.BackgroundColor = "#AAAAAA";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #FavoritesExpander ProfileFavoritesSubPage ProfileFavoriteCardItem #TextHolder #Remove")]
    [CssBody("width: calc(\"Content\"); font-size: 3vw; color: red; font-weight: bold;")]
    class ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemTextHolderRemoveCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Remove

            view = CssEngine.FindParentById(view, "TextHolder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileFavoriteCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileFavoritesSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "FavoritesExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.Font.Bold = true;
            view.Css.TextColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #FavoritesExpander ProfileFavoritesSubPage ProfileFavoriteCardItem #Image")]
    [CssBody("width: 30%; height: calc(\"Content\"); background-position: center; padding: 16px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class ProfilePageFavoritesExpanderProfileFavoritesSubPageProfileFavoriteCardItemImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Image

            view = CssEngine.FindParentByType<ProfileFavoriteCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfileFavoritesSubPage>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "FavoritesExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Width = 30.Percent();
            view.Css.Padding(16);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.BackgroundImageAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #SecurityExpander #ProfileSecurityCard")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-top-right-radius: 16px; border-bottom-left-radius: 16px; padding: 8px; margin: 8px 16px 8px 16px;")]
    class ProfilePageSecurityExpanderProfileSecurityCardCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ProfileSecurityCard

            view = CssEngine.FindParentById(view, "SecurityExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(top: 8, right: 16, bottom: 8, left: 16);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.RadiusTopRight = 16;
            view.Css.Border.RadiusBottomLeft = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #SecurityExpander Button")]
    [CssBody("margin: 8px; color: white; border: none; border-radius: 16px;")]
    class ProfilePageSecurityExpanderButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentById(view, "SecurityExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Margin(8);
            view.Css.TextColor = Colors.White;
            view.Css.Border = 0;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #SecurityExpander #SaveButton")]
    [CssBody("background-color: green; margin-right: 16px;")]
    class ProfilePageSecurityExpanderSaveButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #SaveButton

            view = CssEngine.FindParentById(view, "SecurityExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 16;
            view.Css.BackgroundColor = Colors.Green;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:170", "ProfilePage #SecurityExpander #LogoutButton")]
    [CssBody("background-color: red; margin-left: 16px;")]
    class ProfilePageSecurityExpanderLogoutButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #LogoutButton

            view = CssEngine.FindParentById(view, "SecurityExpander");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ProfilePage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Left = 16;
            view.Css.BackgroundColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage")]
    [CssBody("background-color: #eaeaea;")]
    class OrderInfoPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: OrderInfoPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (OrderInfoPage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage #Body")]
    [CssBody("height: calc(\"Content\");")]
    class OrderInfoPageBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<OrderInfoPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage #Description")]
    [CssBody("background-color: white; font-size: 3.5fvw; font-weight: bold; padding: 16px; border-radius: 8px; margin: 16px; margin-bottom: 0;")]
    class OrderInfoPageDescriptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Description

            view = CssEngine.FindParentByType<OrderInfoPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3.5f/ 100f);
            view.Css.Font.Bold = true;
            view.Css.Padding(16);
            view.Css.Margin(16);
            view.Css.Margin.Bottom = 0;
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage #OrderGrid")]
    [CssBody("height: calc(\"Content\"); padding-left: 16px; padding-bottom: 16px;")]
    class OrderInfoPageOrderGridCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #OrderGrid

            view = CssEngine.FindParentByType<OrderInfoPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding.Left = 16;
            view.Css.Padding.Bottom = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage #OrderGrid OrderCardItem")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-radius: 8px; padding: 8px; padding-top: 16px; margin-top: 16px; margin-right: 16px;")]
    class OrderInfoPageOrderGridOrderCardItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: OrderCardItem

            view = CssEngine.FindParentById(view, "OrderGrid");

            if (view is null) return false;

            view = CssEngine.FindParentByType<OrderInfoPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (OrderCardItem)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Padding.Top = 16;
            view.Css.Margin.Top = 16;
            view.Css.Margin.Right = 16;
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage #OrderGrid OrderCardItem #Image")]
    [CssBody("background-position: center; height: 20vh;")]
    class OrderInfoPageOrderGridOrderCardItemImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Image

            view = CssEngine.FindParentByType<OrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrderGrid");

            if (view is null) return false;

            view = CssEngine.FindParentByType<OrderInfoPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = new Length.BindingLengthRequest(View.Root.Height, y=> y * (20/ 100f));
            view.Css.BackgroundImageAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage #OrderGrid OrderCardItem .Left")]
    [CssBody("width: calc(\"Content\"); font-size: 3fvw; color: gray; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class OrderInfoPageOrderGridOrderCardItemLeftCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Left

            view = CssEngine.FindParentByType<OrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrderGrid");

            if (view is null) return false;

            view = CssEngine.FindParentByType<OrderInfoPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Font.Size = View.Root.ActualWidth * (3f/ 100f);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.TextColor = Colors.Gray;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage #OrderGrid OrderCardItem .Right")]
    [CssBody("text-align: right; font-size: 3.5fvw;")]
    class OrderInfoPageOrderGridOrderCardItemRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Right

            view = CssEngine.FindParentByType<OrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrderGrid");

            if (view is null) return false;

            view = CssEngine.FindParentByType<OrderInfoPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3.5f/ 100f);
            view.Css.TextAlignment = Alignment.Right;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:300", "OrderInfoPage #OrderGrid OrderCardItem .Price")]
    [CssBody("color: green;")]
    class OrderInfoPageOrderGridOrderCardItemPriceCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Price

            view = CssEngine.FindParentByType<OrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "OrderGrid");

            if (view is null) return false;

            view = CssEngine.FindParentByType<OrderInfoPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Green;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:336", "SearchPage")]
    [CssBody("background-color: #eaeaea;")]
    class SearchPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: SearchPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (SearchPage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:336", "SearchPage TextInput")]
    [CssBody("padding: 16px; margin: 0; background-color: white; border: none;")]
    class SearchPageTextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            view = CssEngine.FindParentByType<SearchPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Padding(16);
            view.Css.Margin(0);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:336", "SearchPage .Scroller")]
    [CssBody("z-index: -1;")]
    class SearchPageScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Scroller

            view = CssEngine.FindParentByType<SearchPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.ZIndex = -1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:336", "SearchPage .Scroller ListView")]
    [CssBody("padding-top: 16px;")]
    class SearchPageScrollerListViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListView

            view = CssEngine.FindParentByCssClass(view, "Scroller");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SearchPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ListView)untypedView;
            view.Css.Padding.Top = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:336", "SearchPage .Scroller ListView #Content")]
    [CssBody("margin: 16px; margin-top: 0; margin-bottom: 0;")]
    class SearchPageScrollerListViewContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Content

            view = CssEngine.FindParentByType<ListView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "Scroller");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SearchPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(16);
            view.Css.Margin.Top = 0;
            view.Css.Margin.Bottom = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage")]
    [CssBody("background-color: #eaeaea;")]
    class CartPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CartPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CartPage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage #HeaderPrice")]
    [CssBody("background-color: white; height: calc(\"Content\"); padding: 8px;")]
    class CartPageHeaderPriceCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #HeaderPrice

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage #HeaderPrice .Right")]
    [CssBody("color: green; text-align: right; font-weight: bold;")]
    class CartPageHeaderPriceRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Right

            view = CssEngine.FindParentById(view, "HeaderPrice");

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.TextColor = Colors.Green;
            view.Css.TextAlignment = Alignment.Right;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView")]
    [CssBody("z-index: -1;")]
    class CartPageScrollViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ScrollView

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ScrollView)untypedView;
            view.Css.ZIndex = -1;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem")]
    [CssBody("height: calc(\"Content\"); background: white; border-radius: 8px; padding: 16px; margin: 8px 16px 8px 16px;")]
    class CartPageScrollViewCartOrderCardItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CartOrderCardItem

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CartOrderCardItem)untypedView;
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(16);
            view.Css.Margin(top: 8, right: 16, bottom: 8, left: 16);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem #Image")]
    [CssBody("width: 30%; height: calc(\"Content\");")]
    class CartPageScrollViewCartOrderCardItemImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Image

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Width = 30.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem #Name")]
    [CssBody("font-size: 4vw;")]
    class CartPageScrollViewCartOrderCardItemNameCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Name

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (4/ 100f);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem #ShortCription")]
    [CssBody("font-size: 3vw; color: gray;")]
    class CartPageScrollViewCartOrderCardItemShortCriptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ShortCription

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.TextColor = Colors.Gray;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .LabelText")]
    [CssBody("width: calc(\"Content\"); font-size: 3.5fvw; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class CartPageScrollViewCartOrderCardItemLabelTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .LabelText

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Font.Size = View.Root.ActualWidth * (3.5f/ 100f);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .Right")]
    [CssBody("text-align: right;")]
    class CartPageScrollViewCartOrderCardItemRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Right

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Right;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .Price")]
    [CssBody("color: green;")]
    class CartPageScrollViewCartOrderCardItemPriceCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Price

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Green;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .Remove")]
    [CssBody("color: red;")]
    class CartPageScrollViewCartOrderCardItemRemoveCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Remove

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .TopBorder")]
    [CssBody("border-top: 1px solid #AAAAAA;")]
    class CartPageScrollViewCartOrderCardItemTopBorderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .TopBorder

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Border = new Border { Top = 1, Color = "#AAAAAA"};

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .ItemPickerHolder")]
    [CssBody("padding: 4px;")]
    class CartPageScrollViewCartOrderCardItemItemPickerHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ItemPickerHolder

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(4);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .ItemPickerHolder ItemPicker")]
    [CssBody("border: 1px solid #AAAAAA; margin: 0; width: calc(\"Content\");")]
    class CartPageScrollViewCartOrderCardItemItemPickerHolderItemPickerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ItemPicker

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ItemPicker)untypedView;
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Margin(0);
            view.Css.Border = new Border(1, "#AAAAAA");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .ItemPickerHolder ItemPicker #Label")]
    [CssBody("text-align: center;")]
    class CartPageScrollViewCartOrderCardItemItemPickerHolderItemPickerLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<ItemPicker>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage ScrollView CartOrderCardItem .ItemPickerHolder ItemPicker #Caret")]
    [CssBody("display: none;")]
    class CartPageScrollViewCartOrderCardItemItemPickerHolderItemPickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<ItemPicker>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartOrderCardItem>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override async Task Apply(View view)
        {
            await view.Css.IgnoredAsync(true);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:354", "CartPage #BuyButton")]
    [CssBody("height: calc(\"Content\"); border-radius: 0; background-color: green; border: none; color: white; font-weight: bold; padding: 16px;")]
    class CartPageBuyButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BuyButton

            view = CssEngine.FindParentByType<CartPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Font.Bold = true;
            view.Css.Padding(16);
            view.Css.Border.Radius = 0;
            view.Css.BackgroundColor = Colors.Green;
            view.Css.Border = 0;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage")]
    [CssBody("background-color: #eaeaea;")]
    class LoginPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: LoginPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (LoginPage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage .SpaceFiller")]
    [CssBody("height: calc(\"Container\");")]
    class LoginPageSpaceFillerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SpaceFiller

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage .SpaceFillerH")]
    [CssBody("width: calc(\"Container\");")]
    class LoginPageSpaceFillerHCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SpaceFillerH

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginCard")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-radius: 8px; padding: 8px; margin: 16px; margin-bottom: 0;")]
    class LoginPageLoginCardCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #LoginCard

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(16);
            view.Css.Margin.Bottom = 0;
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Radius = 8;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginCard FormField #Label")]
    [CssBody("width: 30%;")]
    class LoginPageLoginCardFormFieldLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<FormField>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "LoginCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 30.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginCard .Hint")]
    [CssBody("width: calc(\"Container\"); color: darkgray; font-size: 3vw; padding: 0; margin: 0; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class LoginPageLoginCardHintCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Hint

            view = CssEngine.FindParentById(view, "LoginCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Container;
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);
            view.Css.Padding(0);
            view.Css.Margin(0);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.TextColor = Colors.DarkGray;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginCard Row")]
    [CssBody("margin: 8px;")]
    class LoginPageLoginCardRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Row

            view = CssEngine.FindParentById(view, "LoginCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Row)untypedView;
            view.Css.Margin(8);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginCard Row CheckBox")]
    [CssBody("border-radius: 4px; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\"); background: transparent; background-image: url(\"Images/Icons/none.png\");")]
    class LoginPageLoginCardRowCheckBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CheckBox

            view = CssEngine.FindParentByType<Row>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "LoginCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CheckBox)untypedView;
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);
            view.Css.Border.Radius = 4;
            view.Css.BackgroundColor = Colors.Transparent;
            view.Css.BackgroundImagePath = "Images/Icons/none.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginCard Row CheckBox:checked")]
    [CssBody("background-image: url(\"Images/Icons/check.png\");")]
    class LoginPageLoginCardRowCheckBoxCheckedCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is CheckBox && view.PseudoCssState.ContainsWholeWord("checked"))) return false;

            view = CssEngine.FindParentByType<Row>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "LoginCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CheckBox)untypedView;
            view.Css.BackgroundImagePath = "Images/Icons/check.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginCard Row CheckBox #CheckedImage")]
    [CssBody("width: calc(\"Container\"); height: calc(\"Container\"); margin: 4px; padding: 4px;")]
    class LoginPageLoginCardRowCheckBoxCheckedImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CheckedImage

            view = CssEngine.FindParentByType<CheckBox>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByType<Row>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "LoginCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.Width = Length.AutoStrategy.Container;
            view.Css.Padding(4);
            view.Css.Margin(4);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginCard TextView")]
    [CssBody("width: calc(\"Content\"); font-size: 3vw;")]
    class LoginPageLoginCardTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentById(view, "LoginCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Font.Size = View.Root.ActualWidth * (3/ 100f);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #SignupButton")]
    [CssBody("width: calc(\"Content\"); color: #00b9f0; padding: 0 32px 0 32px; margin: 16px; margin-bottom: 0; margin-left: calc(\"view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2\");")]
    class LoginPageSignupButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #SignupButton

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Padding(top: 0, right: 32, bottom: 0, left: 32);
            view.Css.Margin(16);
            view.Css.Margin.Bottom = 0;
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2);
            view.Css.TextColor = "#00b9f0";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:411", "LoginPage #LoginButton")]
    [CssBody("width: calc(\"Content\"); color: white; background-color: #00b9f0; padding: 0 64px 0 64px; margin: 16px; margin-left: calc(\"view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2\"); border: none; border-radius: 16px;")]
    class LoginPageLoginButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #LoginButton

            view = CssEngine.FindParentByType<LoginPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Padding(top: 0, right: 64, bottom: 0, left: 64);
            view.Css.Margin(16);
            view.Css.Margin.Left = new Length.BindingLengthRequest(view.Parent.Width, view.Parent.Padding.Left, view.Parent.Padding.Right, view.Width, (pw, ppl, ppr, vw) => (pw - ppl - ppr - vw) / 2);
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#00b9f0";
            view.Css.Border = 0;
            view.Css.Border.Radius = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage")]
    [CssBody("background-color: #eaeaea;")]
    class SignUpPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: SignUpPage

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (SignUpPage)untypedView;
            view.Css.BackgroundColor = "#eaeaea";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #Body")]
    [CssBody("height: calc(\"Content\");")]
    class SignUpPageBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SignUpInfoCard")]
    [CssBody("height: calc(\"Content\"); background-color: white; border-top-right-radius: 16px; border-bottom-left-radius: 16px; padding: 8px; margin: 8px 16px 8px 16px;")]
    class SignUpPageSignUpInfoCardCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #SignUpInfoCard

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Content;
            view.Css.Padding(8);
            view.Css.Margin(top: 8, right: 16, bottom: 8, left: 16);
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.RadiusTopRight = 16;
            view.Css.Border.RadiusBottomLeft = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SignUpInfoCard .Section")]
    [CssBody("padding-top: 16px; font-weight: bold;")]
    class SignUpPageSignUpInfoCardSectionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Section

            view = CssEngine.FindParentById(view, "SignUpInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Padding.Top = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SignUpInfoCard .ItemPickerHolder")]
    [CssBody("padding: 4px;")]
    class SignUpPageSignUpInfoCardItemPickerHolderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .ItemPickerHolder

            view = CssEngine.FindParentById(view, "SignUpInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(4);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SignUpInfoCard .ItemPickerHolder .LabelText")]
    [CssBody("width: 35%; font-size: 3.5fvw; margin-top: calc(\"view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2\");")]
    class SignUpPageSignUpInfoCardItemPickerHolderLabelTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .LabelText

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "SignUpInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 35.Percent();
            view.Css.Font.Size = View.Root.ActualWidth * (3.5f/ 100f);
            view.Css.Margin.Top = new Length.BindingLengthRequest(view.Parent.Height, view.Parent.Padding.Top, view.Parent.Padding.Bottom, view.Height, (ph, ppt, ppb, vh) => (ph - ppt - ppb - vh) / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SignUpInfoCard .ItemPickerHolder ItemPicker")]
    [CssBody("border: 1px solid #AAAAAA; margin: 0;")]
    class SignUpPageSignUpInfoCardItemPickerHolderItemPickerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ItemPicker

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "SignUpInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ItemPicker)untypedView;
            view.Css.Margin(0);
            view.Css.Border = new Border(1, "#AAAAAA");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SignUpInfoCard .ItemPickerHolder ItemPicker #Caret")]
    [CssBody("display: none;")]
    class SignUpPageSignUpInfoCardItemPickerHolderItemPickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<ItemPicker>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "ItemPickerHolder");

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "SignUpInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override async Task Apply(View view)
        {
            await view.Css.IgnoredAsync(true);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SignUpInfoCard DatePicker #Label")]
    [CssBody("font-size: 3.5fvw; background-color: transparent; color: black; font-weight: normal; border: 1px solid #AAAAAA; padding: 8px; margin: 0;")]
    class SignUpPageSignUpInfoCardDatePickerLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<DatePicker>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "SignUpInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = View.Root.ActualWidth * (3.5f/ 100f);
            view.Css.Font.Bold = false;
            view.Css.Padding(8);
            view.Css.Margin(0);
            view.Css.BackgroundColor = Colors.Transparent;
            view.Css.TextColor = Colors.Black;
            view.Css.Border = new Border(1, "#AAAAAA");

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SignUpInfoCard DatePicker #Caret")]
    [CssBody("display: none;")]
    class SignUpPageSignUpInfoCardDatePickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<DatePicker>(view);

            if (view is null) return false;

            view = CssEngine.FindParentById(view, "SignUpInfoCard");

            if (view is null) return false;

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override async Task Apply(View view)
        {
            await view.Css.IgnoredAsync(true);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("Styles/Common.scss:480", "SignUpPage #SaveButton")]
    [CssBody("background-color: green; color: white; margin: 8px 16px 8px 16px;")]
    class SignUpPageSaveButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #SaveButton

            view = CssEngine.FindParentByType<SignUpPage>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin(top: 8, right: 16, bottom: 8, left: 16);
            view.Css.BackgroundColor = Colors.Green;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.PlatformSpecific
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Windows, "Styles/Components/_Button.scss:2", "TextView")]
    [CssBody("font-family: \"Segoe UI\";")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Segoe UI";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.PlatformSpecific
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Windows, "Styles/Components/_Button.scss:2", "TextInput")]
    [CssBody("font-family: \"Segoe UI\";")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Segoe UI";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.PlatformSpecific
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.IOS, "", "TextInput")]
    [CssBody("font-family: Arial;")]
    class TextInput_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Arial";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.PlatformSpecific
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.IOS, "", "TextView")]
    [CssBody("font-family: Arial;")]
    class TextView_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Arial";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.PlatformSpecific
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles/Components/_Button.scss:9", "TextInput")]
    [CssBody("font-family: Roboto;")]
    class TextInput_2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Roboto";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.PlatformSpecific
{
    [EscapeGCop("Auto-generated")]
    [CssSelector(DevicePlatform.Android, "Styles/Components/_Button.scss:9", "TextView")]
    [CssBody("font-family: Roboto;")]
    class TextView_2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Roboto";

            return Task.CompletedTask;
        }
    }
}